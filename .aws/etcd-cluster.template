{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS on EC2: http://coreos.com/docs/running-coreos/cloud-providers/ec2/",
  "Mappings" : {
      "RegionMap" : {

          "eu-central-1" : {
              "AMI" : "ami-1e7f4603"
          },

          "ap-northeast-1" : {
              "AMI" : "ami-a64b9aa6"
          },

          "us-gov-west-1" : {
              "AMI" : "ami-01452522"
          },

          "sa-east-1" : {
              "AMI" : "ami-a3a223be"
          },

          "ap-southeast-2" : {
              "AMI" : "ami-ad9be297"
          },

          "ap-southeast-1" : {
              "AMI" : "ami-b6261ee4"
          },

          "us-east-1" : {
              "AMI" : "ami-3d53b456"
          },

          "us-west-2" : {
              "AMI" : "ami-ef90acdf"
          },

          "us-west-1" : {
              "AMI" : "ami-5f19f11b"
          },

          "eu-west-1" : {
              "AMI" : "ami-07403070"
          }
      }
  },
  "Parameters": {
    "InstanceType" : {
      "Description" : "EC2 HVM instance type (m3.medium, etc).",
      "Type" : "String",
      "Default" : "t2.small",
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type."
    },
    "ClusterSize": {
      "Default": "3",
      "MinValue": "3",
      "MaxValue": "12",
      "Description": "Number of nodes in cluster (3-12).",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new",
      "Type": "String"
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "KeyPair" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type" : "String"
    }
  },
  "Resources": {
    "CoreOSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "AllowSSHFrom"}}
        ]
      }
    },
    "Ingress2379": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "2379", "ToPort": "2379", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress2380": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "2380", "ToPort": "2380", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress4001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "4001", "ToPort": "4001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        }
      }
    },
    "Ingress7001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "CoreOSSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7001", "ToPort": "7001", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "CoreOSSecurityGroup", "GroupId" ]
        }
      }
    },
    "CloudWatchInstanceProfile": {
     "Type": "AWS::IAM::InstanceProfile",
     "Properties": {
       "Path": "/",
       "Roles": [ "etcd-cluster" ]
      }
    },
    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "LaunchConfigurationName": {"Ref": "CoreOSServerLaunchConfig"},
        "MinSize": "3",
        "MaxSize": "12",
        "DesiredCapacity": {"Ref": "ClusterSize"},
        "Tags": [
            {"Key": "Name", "Value": { "Ref" : "AWS::StackName" }, "PropagateAtLaunch": true}
        ]
      }
    },
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {"Ref": "InstanceType"},
        "IamInstanceProfile" : {"Ref": "CloudWatchInstanceProfile"},
        "KeyName": {"Ref": "KeyPair"},
        "SecurityGroups": [{"Ref": "CoreOSSecurityGroup"}],
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "\n", [
            "#cloud-config",
            "coreos:",
            "  update:",
            "     reboot-strategy: off",
            "  etcd2:",
            "    discovery: https://discovery.etcd.io/b8b29b0cac337ba9ec4a85b4d05b5e49",
            "    advertise-client-urls: http://$private_ipv4:2379",
            "    initial-advertise-peer-urls: http://$private_ipv4:2380",
            "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001",
            "    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001",
            "  units:",
            "    - name: etcd2.service",
            "      command: start",
            "    - name: cloudwatch-monitor.service",
            "      enable: true",
            "      content: |",
            "        [Unit]",
            "        Description=Report CloudWatch Metrics to AWS",
            "        Requires=docker.service",

            "        [Service]",
            "        Type=simple",
            "        TimeoutStartSec=50",
            "        ExecStartPre=-/usr/bin/docker kill cloudwatch-monitor",
            "        ExecStartPre=-/usr/bin/docker rm cloudwatch-monitor",
            "        ExecStartPre=/usr/bin/docker pull octoblu/cloudwatch-monitor",
            "        ExecStart=/usr/bin/docker run \\",
            "          --name cloudwatch-monitor \\",
            "          --privileged \\",
            "          octoblu/cloudwatch-monitor",
            "    - name: cloudwatch-monitor.timer",
            "      command: start",
            "      content: |",
            "        [Unit]",
            "        Description=Run CloudWatch monitor every minute",

            "        [Timer]",
            "        OnBootSec=3 minutes",
            "        OnUnitActiveSec=1 minute",

            "        [Install]",
            "        WantedBy=timers.target"
            ] ]
          }
        }
      }
    }
  }
}
